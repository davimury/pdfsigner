#!/bin/bash +x

umask 0002

readonly NC='\033[0m'
readonly RED='\033[0;31m' 
readonly DIR_SCRIPT=$(dirname "$0")
readonly FILE_LOCALIZADOR="localizador.json"
readonly CMD_DATE="LC_ALL=pt_BR.utf8 date +%y%m%d%H%M%S"

#######################
## DEPENDÊNCIAS
###################

## JAVA
if ! [ -x "$(command -v java)" ]; then
  echo "Comando 'java' nao instalado!"
  exit 2
fi

## OPENSSL
if ! [ -x "$(command -v openssl)" ]; then
  echo "Comando 'openssl' nao instalado!"
  exit 2
fi

## PDFSIG
if ! [ -x "$(command -v pdfsig)" ]; then
  echo "Comando 'pdfsig' nao instalado!"
  exit 2
fi

#######################
## FUNÇÕES
###################

help() {
cat << EOF
Como usar: ${0##*/} [-h] ou [-s PFX SENHA] ou [-x PFX SENHA] ou [-p PDF]
Assine um PDF com um Certificado PFX. Verifique um certificado. Verifique um pdf assinado.

    -h | --help               exibe esta ajuda.
    -x | --pfx    PFX SENHA   verifica um arquivo CERTIFICADO PFX.
    -s | --sign   PFX SENHA   assina um arquivo PDF com o CERTIFICADO PFX
                              caso ainda não esteja assinado.
    -p | --pdf    PDF         verifica a assinatura de um arquivo PDF.
EOF
}

## SIGN PDF
function pdf_sign {
  CERT="$1"
  PASSWORD="$2"
  PDF="$3"
  IS_PDF=`file "${PDF}" | fgrep -c PDF\ document`
  if [ ! -s "${PDF}" ] || [ ! "${PDF: -4}" == ".pdf" ] || [ $((${IS_PDF})) -eq 0 ]
  then
    echo -e "Erro: ${RED}O arquivo deve ser um PDF${NC}"
    return 0
  fi
  NOT_SIGNED=`pdfsig "${PDF}" | fgrep -c "does not contain any signatures"`
  if [ $((${NOT_SIGNED})) -eq 0 ]
  then
    export CLASSPATH="${DIR_SCRIPT}/bcprov-jdk16-137.jar:${DIR_SCRIPT}/itext-2.0.4.jar:${DIR_SCRIPT}/sign.class:."
    #echo "Usage: $0 <Certifiate.pkcs12> <Password> <Original.pdf> <Output.pdf>"
    java sign ${@}
    return 1
  else
    echo -e "Erro: ${RED}Este arquivo PDF já está assinado${NC}"
    return 0
  fi
}

## FUNÇÃO: VERIFICAR SE O CERTIFICADO É VÁLIDO
##
## pfx_check /PATH/TO/CERTIFICADO.PFX SENHA
##
## retorna 1 se certificado válido | 0 se certificado expirado
##
function pfx_check {
  CERT="$1"
  PASSWORD="$2"
  if [ ! ${CERT: -4} == ".pfx" ]
  then
    echo "O certificado deve ser .pfx"
    return 0
  fi
  expiration_date=`openssl pkcs12 -in "${CERT}" -nokeys -passin pass:"${PASSWORD}" 2>/dev/null | openssl x509 -noout -enddate | cut -d= -f2`
  expiration_date_ts=`date -d "${expiration_date}" +%s`
  current_ts=`date +%s`
  if [ $((${expiration_date_ts})) -gt $((${current_ts})) ]
  then
    echo "Certificado Ok"
    return 1
  else
    echo -e "Erro: ${RED}Certificado inválido, expirado ou senha incorreta${NC}"
    return 0
  fi
}

## FUNÇÃO: VERIFICAR SE O PDF ESTÁ ASSINADO
##
## pdf_check /PATH/TO/ARQUIVO.PDF
##
## retorna 1 se assinatura válida | 0 se a assinatura expirada
##
function pdf_check {
  PDF="$1"
  IS_PDF=`file "${PDF}" | fgrep -c PDF\ document`
  if [ ! -s "${PDF}" ] || [ ! "${PDF: -4}" == ".pdf" ] || [ $((${IS_PDF})) -eq 0 ]
  then
    echo -e "Erro: ${RED}O arquivo deve ser um PDF${NC}"
    return 0
  fi
  NOT_SIGNED=`pdfsig "${PDF}" | fgrep -c "does not contain any signatures"`
  if [ $((${NOT_SIGNED})) -eq 1 ]
  then
    echo -e "Erro: ${RED}PDF não assinado${NC}"
    return 0
  fi
  VALIDATION=`pdfsig "${PDF}" | grep "Certificate Validation" | cut -d: -f2- | awk '{$1=$1};1'`
  IS_EXPIRED=`echo ${VALIDATION} | fgrep -c "Certificate has Expired"`
  if [ $((${IS_EXPIRED})) -eq 1 ]
  then
    echo -e "Erro: ${RED}Certificado Expirado${NC}"
    return 0
  else
    echo "Assinatura OK"
    return 1
  fi
}

#######################
## EXECUÇÃO
###################

# Exibir ajuda se não inserir argumentos
if [ "$#" == 0 ] || [ "${1::1}" != "-" ]
then
  help
  exit 0
fi

# Lista de argumentos válidos
while [[ $# -gt 0 ]]; do
  key="$1"
  case "$key" in
    -h|--help)
    help
    shift
    ;;
    -s|--sign)
    [ "$#" != 4 ] && help && exit 0
    pfx_check $2 $3 && pdf_sign $2 $3 $4
    exit $?
    shift 4
    ;;
    -x|--pfx)
    [ "$#" != 3 ] && help && exit 0
    pfx_check $2 $3
    exit $?
    shift 3
    ;;
    -p|--pdf)
    [ "$#" != 2 ] && help && exit 0
    pdf_check $2
    exit $?
    shift 2
    ;;
    *)
    echo "Opção inválida '$key'"
    ;;
  esac
done

exit 0
